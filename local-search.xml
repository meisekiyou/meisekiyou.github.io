<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用Hexo搭建博客</title>
    <link href="/7043.html"/>
    <url>/7043.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在折腾的过后往往都需要进行总结记录，这次蹭着闲暇之余利用 Hexo 复活我多年前的博客。</p><p>##基本设想</p><ul><li>本地 Hexo 生成静态文件，使用 GitHub 同步至服务器仓库</li><li>服务器仓库收到 push 后 Git Hooks 触发 shell 脚本复制至 nginx 网站根目录</li><li>通过 nginx 转发，实现博客访问</li></ul><h2 id="环境约定"><a href="#环境约定" class="headerlink" title="环境约定"></a>环境约定</h2><h3 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h3><ul><li>macOS Mojave 10.14.6<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3></li><li>CentOS 7</li></ul><h2 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h2><p>Hexo 依赖于 GitHub 和 Node.js。由于我使用的是 macOS 并安装了 Xcode 所以自带 GitHubt 。至于 Node.js 我推荐使用 nvm 进行安装。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><pre><code class="bash">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</code></pre><p>运行后根据提示向 ~/.bash_profile 写入环境变量。</p><pre><code>export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;</code></pre><p>接着使其生效。</p><pre><code class="bash">$ source ~/.bash_profile</code></pre><p>通过命令查看可用版本。</p><pre><code class="bash">$ nvm ls-remote       v12.13.0   (LTS: Erbium)       v12.13.1   (LTS: Erbium)       v12.14.0   (LTS: Erbium)       v12.14.1   (LTS: Erbium)       v12.15.0   (LTS: Erbium)       v12.16.0   (LTS: Erbium)-&gt;     v12.16.1   (Latest LTS: Erbium)</code></pre><p>从输出的信息可以看到 12.16.1 为最新的LTS版，那么就决定是你了,安装！</p><pre><code class="bash">$ nvm install 12.16.1$ node -vv12.16.1$ npm -v6.13.4</code></pre><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>GitHub 和 Node.js都安装完成后就可以使用 npm 安装 Hexo 了。</p><pre><code class="bash">$ npm install -g hexo-cli</code></pre><p>接着创建博客的目录并初始化.</p><pre><code class="bash">$ hexo init blog$ cd blog$ npm install</code></pre><p>为了使用 hexo d 进行同步我们还需要安装插件和生成密钥</p><pre><code class="bash">$ npm install hexo-deployer-git --save$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code></pre><p>输出密钥内容到屏幕上</p><pre><code class="bash">$ cat ~/.ssh/id_rsa.pub</code></pre><p>至此本地环境配置完毕。</p><h2 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h2><h3 id="安装-GitHub"><a href="#安装-GitHub" class="headerlink" title="安装 GitHub"></a>安装 GitHub</h3><pre><code class="bash">$ yum update -y$ yum install git -y</code></pre><h4 id="配置-GitHub-用户"><a href="#配置-GitHub-用户" class="headerlink" title="配置 GitHub 用户"></a>配置 GitHub 用户</h4><pre><code class="bash"># 创建 git 用户并修改密码$ adduser git$ echo &#39;password&#39; | passwd --stdin git# 切换至 git 配置SSH$ su git$ cd /home/git$ mkdir .ssh$ chmod 700 .ssh$ vi .ssh/authorized_keys# 在 authorized_keys 中写入本地的公钥信息$ chmod 600 .ssh/authorized_keys# 禁用shell登入$ vi /etc/passwd</code></pre><p>将最后一行的</p><pre><code>git:x:1000:1000::/home/git:/bin/bash</code></pre><p>改为</p><pre><code>git:x:1000:1000::/home/git:/usr/bin/git-shell</code></pre><h4 id="创建裸仓库"><a href="#创建裸仓库" class="headerlink" title="创建裸仓库"></a>创建裸仓库</h4><pre><code class="bash">$ cd /home/git$ mkdir blog.git$ cd blog.git$ git init iibare</code></pre><h4 id="配置-Git-Hooks"><a href="#配置-Git-Hooks" class="headerlink" title="配置 Git Hooks"></a>配置 Git Hooks</h4><pre><code class="bash">$ vi hooks/post-receive</code></pre><p>写入如下内容</p><pre><code>#!/bin/shgit --work-tree=/blog --git-dir=/home/git/blog.git checkout -f</code></pre><p>–work-tree 的目录为 nginx 网站根目录，可以自由设定。最后给脚本加上执行权限</p><pre><code class="bash">$ chmod +x hooks/post-receive</code></pre><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>这里我采用编译安装，香省事的话也可以使用 yum 进行安装。</p><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><pre><code class="bash"># 切换至 root 用户$ su root$ cd /usr/local/src/$ wget https://nginx.org/download/nginx-1.16.1.tar.gz https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz https://www.openssl.org/source/openssl-1.1.1d.tar.gz https://www.zlib.net/zlib-1.2.11.tar.gz</code></pre><h4 id="安装-openssl"><a href="#安装-openssl" class="headerlink" title="安装 openssl"></a>安装 openssl</h4><pre><code class="bash">$ yum install gcc-c++ -y$ tar xf openssl-1.1.1d.tar.gz$ cd openssl-1.1.1d$ ./config$ make -j2 &amp;&amp; make install$ echo &quot;/usr/local/lib64/&quot; &gt;&gt; /etc/ld.so.conf$ ldconfig</code></pre><h4 id="安装-zlib"><a href="#安装-zlib" class="headerlink" title="安装 zlib"></a>安装 zlib</h4><pre><code class="bash">$ cd ..$ tar xf zlib-1.2.11.tar.gz$ cd zlib-1.2.11$ ./configure$ make -j2 &amp;&amp; make install</code></pre><h4 id="安装-pcre"><a href="#安装-pcre" class="headerlink" title="安装 pcre"></a>安装 pcre</h4><pre><code class="bash">$ cd ..$ tar xf pcre-8.44.tar.gz$ cd pcre-8.44$ ./configure$ make -j2 &amp;&amp; make install</code></pre><h4 id="安装-Nginx-1"><a href="#安装-Nginx-1" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h4><pre><code class="bash">$ cd ..$ tar xf nginx-1.16.1.tar.gz$ cd nginx-1.16.1# 创建 nginx 运行用户$ groupadd nginx$ useradd -s /sbin/nologin -g nginx nginx# 配置编译参数$ ./configure \--group=nginx \--user=nginx \--with-http_stub_status_module \--with-http_ssl_module \--with-http_realip_module \--with-http_v2_module \--with-http_gzip_static_module \--with-pcre=../pcre-8.44 \--with-openssl=../openssl-1.1.1d \--with-zlib=../zlib-1.2.11</code></pre><p>输出的Makefile信息</p><pre><code>Configuration summary  + using PCRE library: ../pcre-8.44  + using OpenSSL library: ../openssl-1.1.1d  + using zlib library: ../zlib-1.2.11  nginx path prefix: &quot;/usr/local/nginx&quot;  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;  nginx modules path: &quot;/usr/local/nginx/modules&quot;  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;  nginx http client request body temporary files: &quot;client_body_temp&quot;  nginx http proxy temporary files: &quot;proxy_temp&quot;  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;  nginx http scgi temporary files: &quot;scgi_temp&quot;</code></pre><p>老规矩编译并安装</p><pre><code class="bash">$ make -j2 &amp;&amp; make install</code></pre><h4 id="善后工作"><a href="#善后工作" class="headerlink" title="善后工作"></a>善后工作</h4><pre><code class="bash"># 任意目录运行 Nginx$ ln -s /usr/local/nginx/sbin/nginx /usr/sbin/# 配置systemd脚本$ vi /usr/lib/systemd/system/nginx.service</code></pre><p>写入以下内容</p><pre><code>[Unit]Description=The NGINX HTTP and reverse proxy serverAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.confExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s stopPrivateTmp=true[Install]WantedBy=multi-user.target</code></pre><p>重载 systemd 脚本</p><pre><code class="bash">$ systemctl daemon-reload# 设置 Nginx 开机自启动$ systemctl enable nginx</code></pre><h4 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h4><pre><code class="bash"># 创建网站根目录$ mkdir /blog# 给予 git 权限以供同步仓库数据$ chown -R git:git /blog# 修改 Nginx 配置文件，不清楚路径的话可以用 nginx -t 查找以下$ vi /usr/local/nginx/conf/nginx.conf# 修改后测试配置文件并启动 Nginx$ nginx -t$ systemctl start nginx# 如果开启了防火墙记得开放 http 端口$ firewall-cmd --zone=public --add-port=80/tcp --permanent</code></pre><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><p>打开本地博客根目录下的_config.yml文件，修改最后的deploy配置</p><pre><code>deploy:  type: git  repo: git@&#39;IP&#39;:/home/git/blog.git  branch: master</code></pre><p>在写完博文后使用</p><pre><code class="bash">$ hexo g -d</code></pre><p>就可以轻松部署到服务器上了。对了，善用 <code>hexo clean</code> 。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Terminal Proxyの設定メモ</title>
    <link href="/9190.html"/>
    <url>/9190.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今回は自宅で学校のサーバーを利用するための設定を調べてメモに書きました。初めて日本語でメモを書くので、もし何か間違っていましたら訂正してください！</p><h2 id="環境確認"><a href="#環境確認" class="headerlink" title="環境確認"></a>環境確認</h2><ul><li>macOS Mojave 10.14.6</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre><code class="bash">vi ~/.bash_profile</code></pre><p>~/.bash_profileに書く</p><pre><code class="bash">alias proxy=&#39;export all_proxy=socks5://127.0.0.1:1080&#39;alias unproxy=&#39;unset all_proxy&#39;</code></pre><h2 id="使う方法"><a href="#使う方法" class="headerlink" title="使う方法"></a>使う方法</h2><pre><code class="bash">proxy　#ONunproxy #OFF</code></pre><h2 id="curlで自分のIPを確認する"><a href="#curlで自分のIPを確認する" class="headerlink" title="curlで自分のIPを確認する"></a>curlで自分のIPを確認する</h2><pre><code class="bash">curl inet-ip.info</code></pre>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>macOS Mojave 安装 waifu2x-converter-glsl</title>
    <link href="/14602.html"/>
    <url>/14602.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于模糊的动漫风格图片我们可以使用 <a href="https://github.com/nagadomi/waifu2x" target="_blank" rel="noopener">waifu2x</a> 进行放大，可惜的是新版 macOS 放弃了对 NVIDIA 显卡的支持。对于非 NVIDIA 显卡我们可以使用 <a href="https://github.com/ueshita/waifu2x-converter-glsl" target="_blank" rel="noopener">waifu2x-converter-glsl</a> 分支利用 OpenGL 替代 NVIDIA CUDA 实现。</p><h2 id="环境约定"><a href="#环境约定" class="headerlink" title="环境约定"></a>环境约定</h2><ul><li>macOS Mojave 10.14.6</li><li>Xcode 11.3.1</li><li>Homebrew 2.2.6</li><li>Intel UHD Graphics 630</li></ul><h2 id="编译前准备"><a href="#编译前准备" class="headerlink" title="编译前准备"></a>编译前准备</h2><p>waifu2x-converter-glsl 依赖于 OpenCV 和 GLFW，这里我们使用 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 安装</p><pre><code class="bash">brew install opencv glfw</code></pre><p>brew install 安装的应用默认目录为 /usr/local/Cellar/</p><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><pre><code class="bash">git clone https://github.com/ueshita/waifu2x-converter-glslcd waifu2x-converter-glsl/buildopen waifu2x-converter-glsl.xcodeproj</code></pre><h2 id="替换库文件"><a href="#替换库文件" class="headerlink" title="替换库文件"></a>替换库文件</h2><p><img src="/images/1.png" srcset="/img/loading.gif" alt=""></p><h2 id="添加Header-Search-Paths"><a href="#添加Header-Search-Paths" class="headerlink" title="添加Header Search Paths"></a>添加Header Search Paths</h2><p><img src="/images/2.png" srcset="/img/loading.gif" alt=""></p><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><pre><code class="bash">xcodebuild -project waifu2x-converter-glsl.xcodeproj -target waifu2x-converter-glslcp build/Release/waifu2x-converter-glsl ..chmod +x ../waifu2x-converter-glsl</code></pre><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p>xcode-select: error: tool ‘xcodebuild’ requires Xcode, but active developer directory ‘/Library/Developer/CommandLineTools’ is a command line tools instance</p><pre><code class="bash">sudo xcode-select -s /Applications/Xcode.app/Contents/Developer</code></pre><p>指定Command Line Tools路径</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个编译还是很顺利的，后续可以在 ~/.bash_profile 添加环境变量在任意目录运行，这里就不演示了。</p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
